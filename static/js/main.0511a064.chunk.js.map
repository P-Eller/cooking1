{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CheckBox.js","components/CheckBoxBlock.js","recipeFilters.js","components/FilterBar.js","components/Recipe.js","components/RecipeList.js","recipes.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CheckBox","value","htmlFor","CheckBoxBlock","options","option","components_CheckBox","recipeFilters","FilterBar","recipeFilter","src_components_CheckBoxBlock","Recipe","author","RecipeList","recipes","recipe","components_Recipe","tag_array","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","state","recipesTest","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_FilterBar","components_Scroll","components_RecipeList","components_CardList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0511a064.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\r\nimport './CheckBoxBlock.css';\r\n\r\nconst CheckBox = ({name , id}) => {\r\n\r\n  return (\r\n    <div className=\"list-group\">\r\n      \r\n        <input type=\"checkbox\" name=\"CheckBoxInputName\" value=\"Value1\" id={id} />\r\n        <label className=\"list-group-item\" htmlFor={id}>{name}</label>\r\n\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default CheckBox;","import React from 'react';\r\nimport CheckBox from './CheckBox';\r\n\r\nconst CheckBoxBlock = ({id, name, options}) => {\r\n  return(\r\n    <div>\r\n      <h1>{name}</h1>\r\n      {\r\n          options.map((option, i) => {\r\n            return (<CheckBox key= {i} name={option} id={name+i}/>);\r\n          })\r\n      \r\n      }\r\n    </div>\r\n  )\r\n\r\n }\r\n  \r\n  export default CheckBoxBlock;","export const recipeFilters = [\n  {\n    id: 1,\n    name: 'Dish',\n    options: ['starter', 'main','dessert']\n  },\n  {\n    id: 2,\n    name: 'Duration',\n    options: ['snack','short', 'middle','long']\n  },\n  {\n    id: 3,\n    name: 'Meat',\n    options: ['vegan', 'meat']\n  }\n];\n","import React from 'react';\r\nimport CheckBoxBlock from './CheckBoxBlock';\r\nimport {recipeFilters} from '../recipeFilters'\r\n\r\nconst FilterBar = () => {\r\n    return (\r\n        <div>\r\n        {\r\n          recipeFilters.map((recipeFilter, i) => {\r\n            return (\r\n                \r\n                <CheckBoxBlock\r\n                  key={i}\r\n                  id={recipeFilter.id}\r\n                  name={recipeFilter.name}\r\n                  options={recipeFilter.options}\r\n                  />\r\n              );\r\n\r\n          })\r\n        }\r\n        </div>\r\n    );\r\n  }\r\n  \r\nexport default FilterBar;","import React from 'react';\n\nconst Recipe = ({ name, author }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <div>\n        <h2>{name}</h2>\n        <p>{author}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Recipe;\n","import React from 'react';\nimport Recipe from './Recipe';\n\nconst RecipeList = ({ recipes }) => {\n  return (\n    <div>\n      {\n        recipes.map((recipe, i) => {\n          return (\n            <Recipe\n              key={i}\n              name={recipe.name}\n              author={recipe.author}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default RecipeList;","export const recipes = [\n  {\n    id: 1,\n    name: 'Pancakes',\n    author: 'Hester',\n    tag_array: ['short','starter','vegan']\n  },\n  {\n    id: 2,\n    name: 'Lasagne',\n    author: 'Philipp',\n    tag_array: ['middle','main','meat']\n  }\n];\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport FilterBar from '../components/FilterBar';\r\nimport RecipeList from '../components/RecipeList';\r\nimport {recipes} from '../recipes';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      recipesTest: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n    \r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ recipesTest: users})});\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { robots, recipesTest, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    const filteredRecipesTest = recipesTest.filter(recipe =>{\r\n      return recipe.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return !recipesTest.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>CookingBook</h1>\r\n          \r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-2\">\r\n              <FilterBar/>\r\n              </div>\r\n              <div className=\"col-10\">\r\n              <Scroll>\r\n                <RecipeList recipes={recipes}/>\r\n                <CardList robots={filteredRobots} />\r\n              </Scroll>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n          \r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}